-- Création de la base de données et placement dans celle-ci (peut être supprimé si la base existe déjà)
DROP DATABASE IF EXISTS BOOKSANDMOVIES;
GO
CREATE DATABASE BOOKSANDMOVIES;
GO
USE BOOKSANDMOVIES;
GO

--Suppression des tables si existantes (dans le cas d'une base de données déjà existante).
DROP TABLE IF EXISTS ACTEUR;
DROP TABLE IF EXISTS NOTEFILM;
DROP TABLE IF EXISTS NOTELIVRE;
DROP TABLE IF EXISTS LIVRE;
DROP TABLE IF EXISTS FILM;
DROP TABLE IF EXISTS UTILISATEUR;
DROP TABLE IF EXISTS CELEBRITE;
DROP TABLE IF EXISTS CATEGORIELIVRE;
DROP TABLE IF EXISTS CATEGORIEFILM;

--Création de la table Utilisateur
CREATE TABLE UTILISATEUR (
	ID_UTILISATEUR INT IDENTITY(1,1) NOT NULL,
	NOM NVARCHAR (100) NOT NULL,
	PRENOM NVARCHAR (100) NOT NULL,
	ADRESSEMAIL NVARCHAR (100) NOT NULL,
	MOTDEPASSE CHAR(128) NOT NULL,
	DATENAISSANCE DATE NOT NULL,
	LASTCONNEXION DATETIME NOT NULL,
	CONSTRAINT prk_constraint_UTILISATEUR PRIMARY KEY (ID_UTILISATEUR),
	-- Ajout d'une contrainte d'unicité sur les adresses mail des utilisateurs afin d'empêcher les doublons pouvant être dangereux pour le bon fonctionnement de l'application
	CONSTRAINT UC_ADRESSEMAIL_UTILISATEUR UNIQUE (ADRESSEMAIL)
);

--Création de la table Celebrite
CREATE TABLE CELEBRITE (
	ID_CELEBRITE INT IDENTITY(1,1) NOT NULL,
	NOM NVARCHAR (100) NOT NULL,
	PRENOM NVARCHAR (100) NOT NULL,
	DATENAISSANCE DATE NOT NULL,
	CONSTRAINT prk_constraint_CELEBRITE PRIMARY KEY (ID_CELEBRITE)
);

--Création de la table Categorielivre (catégorisation des livres)
CREATE TABLE CATEGORIELIVRE (
	ID_CATEGORIELIVRE INT IDENTITY(1,1) NOT NULL,
	LIBELLE NVARCHAR (25) NOT NULL
	CONSTRAINT prk_constraint_CATEGORIELIVRE PRIMARY KEY (ID_CATEGORIELIVRE),
	-- Ajout d'une contrainte d'unicité sur les catégories de livre pour empêcher les doublons
	CONSTRAINT UC_Libelle_CATEGORIELIVRE UNIQUE (LIBELLE)
);

--Création de la table Livre
CREATE TABLE LIVRE (
	ID_LIVRE INT IDENTITY(1,1) NOT NULL,
	ID_CATEGORIELIVRE INT NOT NULL,
	ID_AUTEUR INT NOT NULL,
	TITRE NVARCHAR (100) NOT NULL,
	EDITEUR NVARCHAR (100) NOT NULL,
	DATEPARUTION DATE NOT NULL,
	CONSTRAINT prk_constraint_LIVRE PRIMARY KEY (ID_LIVRE),
	CONSTRAINT fk_constraint_LIVRE_CATEGORIELIVRE FOREIGN KEY (ID_CATEGORIELIVRE) REFERENCES CATEGORIELIVRE(ID_CATEGORIELIVRE),
	CONSTRAINT fk_constraint_LIVRE_CELEBRITE_AUTEUR FOREIGN KEY (ID_AUTEUR) REFERENCES CELEBRITE(ID_CELEBRITE)
);

--Création de la table Notelivre (notation des livres par les utilisateurs)
CREATE TABLE NOTELIVRE (
	ID_NOTELIVRE INT IDENTITY(1,1) NOT NULL,
	ID_LIVRE INT NOT NULL,
	ID_UTILISATEUR INT NOT NULL,
	NOTE_SCENARIO FLOAT NOT NULL,
	NOTE_PERSONNAGE FLOAT NOT NULL,
	NOTE_QUALITEEC FLOAT NOT NULL,
	COMMENTAIRE NVARCHAR (280),
	CONSTRAINT prk_constraint_NOTELIVRE PRIMARY KEY (ID_NOTELIVRE),
	CONSTRAINT fk_constraint_NOTELIVRE_LIVRE FOREIGN KEY (ID_LIVRE) REFERENCES LIVRE(ID_LIVRE),
	CONSTRAINT fk_constraint_NOTELIVRE_UTILISATEUR FOREIGN KEY (ID_UTILISATEUR) REFERENCES UTILISATEUR(ID_UTILISATEUR),
	-- Ajout des contraintes sur les notes afin que celles-ci soient obligatoirement comprises en 0 et 10.
	CONSTRAINT CK_constraint_NOTELIVRE_NOTE_SCENARIO CHECK (NOTE_SCENARIO >= 0 AND NOTE_SCENARIO <= 10),
	CONSTRAINT CK_constraint_NOTELIVRE_NOTE_PERSONNAGE CHECK (NOTE_PERSONNAGE >= 0 AND NOTE_PERSONNAGE <= 10),
	CONSTRAINT CK_constraint_NOTELIVRE_NOTE_QUALITEEC CHECK (NOTE_QUALITEEC >= 0 AND NOTE_QUALITEEC <= 10),
	-- Ajout d'une contrainte d'unicité de la relation Id_Utilisateur / Id_Livre car un utilisateur ne peut noter qu'une seule fois un livre
	CONSTRAINT UC_constraint_NOTELIVRE UNIQUE (ID_UTILISATEUR, ID_LIVRE)
);

--Création de la table Categoriefilm (catégorisation des films)
CREATE TABLE CATEGORIEFILM (
	ID_CATEGORIEFILM INT IDENTITY(1,1) NOT NULL,
	LIBELLE NVARCHAR (50) NOT NULL
	CONSTRAINT prk_constraint_CATEGORIEFILM PRIMARY KEY (ID_CATEGORIEFILM),
	-- Ajout d'une contrainte d'unicité sur les catégories de film pour empêcher les doublons
	CONSTRAINT UC_Libelle_CATEGORIEFILM UNIQUE (LIBELLE)
);

--Création de la table Film
CREATE TABLE FILM (
	ID_FILM INT IDENTITY(1,1) NOT NULL,
	ID_CATEGORIEFILM INT NOT NULL,
	ID_REALISATEUR INT NOT NULL,
	TITRE NVARCHAR (100) NOT NULL,
	DATESORTIE DATE NOT NULL,
	DUREE TIME(0) NOT NULL,
	CONSTRAINT prk_constraint_FILM PRIMARY KEY (ID_FILM),
	CONSTRAINT fk_constraint_FILM_CATEGORIEFILM FOREIGN KEY (ID_CATEGORIEFILM) REFERENCES CATEGORIEFILM(ID_CATEGORIEFILM),
	CONSTRAINT fk_constraint_FILM_CELEBRITE_REALISATEUR FOREIGN KEY (ID_REALISATEUR) REFERENCES CELEBRITE(ID_CELEBRITE)
);

--Création de la table Notefilm (notation des films par les utilisateurs)
CREATE TABLE NOTEFILM (
	ID_NOTEFILM INT IDENTITY(1,1) NOT NULL,
	ID_FILM INT NOT NULL,
	ID_UTILISATEUR INT NOT NULL,
	NOTE_SCENARIO FLOAT NOT NULL,
	NOTE_JEUACTEUR FLOAT NOT NULL,
	NOTE_QUALITEAV FLOAT NOT NULL,
	COMMENTAIRE NVARCHAR (280),
	CONSTRAINT prk_constraint_NOTEFILM PRIMARY KEY (ID_NOTEFILM),
	CONSTRAINT fk_constraint_NOTEFILM_LIVRE FOREIGN KEY (ID_FILM) REFERENCES FILM(ID_FILM),
	CONSTRAINT fk_constraint_NOTEFILM_UTILISATEUR FOREIGN KEY (ID_UTILISATEUR) REFERENCES UTILISATEUR(ID_UTILISATEUR),
	-- Ajout des contraintes sur les notes afin que celles-ci soient obligatoirement comprises en 0 et 10.
	CONSTRAINT CK_constraint_NOTEFILM_NOTE_SCENARIO CHECK (NOTE_SCENARIO >= 0 AND NOTE_SCENARIO <= 10),
	CONSTRAINT CK_constraint_NOTEFILM_NOTE_JEUACTEUR CHECK (NOTE_JEUACTEUR >= 0 AND NOTE_JEUACTEUR <= 10),
	CONSTRAINT CK_constraint_NOTEFILM_NOTE_QUALITEAV CHECK (NOTE_QUALITEAV >= 0 AND NOTE_QUALITEAV <= 10),
	-- Ajout d'une contrainte d'unicité de la relation Id_Utilisateur / Id_Film car un utilisateur ne peut noter qu'une seule fois un film
	CONSTRAINT UC_constraint_NOTEFILM UNIQUE (ID_UTILISATEUR, ID_FILM)
);

--Création de la table Acteur (célébrité jouant dans un film)
CREATE TABLE ACTEUR (
	ID_FILM INT NOT NULL,
	ID_CELEBRITE INT NOT NULL,
	PERSONNAGE NVARCHAR (50),
	CONSTRAINT prk_constraint_ACTEUR PRIMARY KEY (ID_FILM, ID_CELEBRITE),
	CONSTRAINT fk_constraint_ACTEUR_FILM FOREIGN KEY (ID_FILM) REFERENCES FILM(ID_FILM),
	CONSTRAINT fk_constraint_ACTEUR_CELEBRITE FOREIGN KEY (ID_CELEBRITE) REFERENCES CELEBRITE(ID_CELEBRITE)
);